# Create a vector `phone_numbers` that contains the numbers 8, 6, 7, 5, 3, 0, 9
phone_numbers <- c(8, 6, 7, 5, 3, 0, 9)
# Create a vector `prefix` that has the first three elements of `phone_numbers`
prefix <- phone_numbers[1:3]
# Create a vector `small` that has the values of `phone_numbers` that are
# less than or equal to 5
small <- phone_numbers <= 5
# Create a vector `small` that has the values of `phone_numbers` that are
# less than or equal to 5
small <- phone_numbers[phone_numbers <= 5]
# Create a vector `large` that has the values of `phone_numbers` that are
# strictly greater than 5
large <- phone_numbers[phone_numbers > 5]
# Replace the values in `phone_numbers` that are larger than 5 with the number 5
replace(phone_numbers, phone_numbers[phone_numbers > 5], 5)
# Replace the values in `phone_numbers` that are larger than 5 with the number 5
replace(phone_numbers, [phone_numbers > 5], 5)
# Replace the values in `phone_numbers` that are larger than 5 with the number 5
replace(phone_numbers, phone_numbers[phone_numbers > 5], 5)
# Replace the values in `phone_numbers` that are larger than 5 with the number 5
replace(phone_numbers, phone_numbers > 5, 5)
# Replace every odd-numbered value in `phone_numbers` with the number 0
replace(phone_numbers, phone_numbers %% 2 == 1, 0)
# Create a vector `my_breakfast` of everything you ate for breakfast
my_breakfast <- c("congee")
# Create a vector `my_lunch` of everything you ate (or will eat) for lunch
my_lunch <- c()
# Create a list `meals` that has contains your breakfast and lunch
meals <- c(my_breakfast, my_lunch)
# Create a list `meals` that has contains your breakfast and lunch
meals <- list(breakfast = my_breakfast, lunch = my_lunch)
print(meals)
# Add a "dinner" element to your `meals` list that has what you plan to eat
# for dinner
meals.dinner = c("shirmp", "celery", "rice")
# Add a "dinner" element to your `meals` list that has what you plan to eat
# for dinner
meals[[dinner]] = c("shirmp", "celery", "rice")
# Add a "dinner" element to your `meals` list that has what you plan to eat
# for dinner
meals[["dinner"]] = c("shirmp", "celery", "rice")
source('~/Desktop/INFO 201/book-exercises/chapter-08-exercises/exercise-1/exercise.R')
# Use dollar notation to extract your `dinner` element from your list
# and save it in a vector called 'dinner'
dinner <- meals$dinner
# Use double-bracket notation to extract your `lunch` element from your list
# and save it in your list as the element at index 5 (no reason beyond practice)
meals[[5]] = meals[["lunch"]]
View(meals)
# Use single-bracket notation to extract your breakfast and lunch from your list
# and save them to a list called `early_meals`
early_meals <- meals[c("breakfast", "lunch")]
# Your script for Part 1 goes here (and delete this comment!)
# 1. [1pt] Create a variable called my_age, assigning it a value that is your age in years (as a number, e.g., 22).
my_age <- 20
# 2. [1pt] Create a variable called my_name, assigning it a value that is your name (as a string, in quotes).
my_name <- "Yueqi Xu"
make_introduction <- function(name, age) {
return paste("Hello, my name is", my_name, "and I'm", my_age, "years old.")
}
make_introduction <- function(name, age) {
return (paste("Hello, my name is", my_name, "and I'm", my_age, "years old."))
}
return (paste("Hello, my name is", name, "and I'm", age, "years old."))
make_introduction <- function(name, age) {
return (paste("Hello, my name is", name, "and I'm", age, "years old."))
}
# 4. [2pt] Create a variable called my_intro, assigning it the result of the make_introduction() function with your my_name and my_age variables passed into it. Print the my_intro variable after you create it.
my_intro <- make_introduction(my_name, my_age)
print(my_intro)
# 5. [3pt] Create a variable called casual_intro by replacing (substituting) the text "Hello, my name is" in your my_intro variable with the text "Hey, I'm". Use the sub() function to do this; you may need to look up what arguments it expects! Print the variable after you create it.
casual_intro <- sub("Hello, my name is", "Hey, I'm", my_intro)
print(casual_intro)
# 6. [4pt] Create a variable capital_intro, which is your my_intro variable with each word capitalized.
# Use the stringr (Links to an external site.) library function str_to_title() (Links to an external site.) to do this.
# Print the variable after you create it.
capital_intro <- str_to_title(my_intro)
library("stringr", lib.loc="/Library/Frameworks/R.framework/Versions/3.6/Resources/library")
# 6. [4pt] Create a variable capital_intro, which is your my_intro variable with each word capitalized.
# Use the stringr (Links to an external site.) library function str_to_title() (Links to an external site.) to do this.
# Print the variable after you create it.
capital_intro <- str_to_title(my_intro)
print(capital_intro)
# 7. [3pt] Create a variable intro_e_count that stores the number of times the letter 'e' (lower-case only) appears in the
# my_intro variable. Do this using an appropriate method from the stringr library to "count" the letters (that's a hint!).
# Print the variable after you create it.
intro_e_count <- str_count(my_intro, "e")
print(intro_e_count)
# 1. [2pt] Create a variable called books, assigning it a vector containing the names of six books you like.
# Print the variable after you create it.
books <- c("And The Mountains Echoed", "The Great Gatsby", "1984", "Animal Farm", "To Kill A Mockingbird", "The Count of Monte Cristo")
print(books)
# 2. [2pt] Create a variable called top_three_books that only contains the first three books in your books vector.
# Use bracket notation to select the elements from the books variable. Print the top_three_books variable after you create it.
top_three_books <- books[1:3]
print(top_three_books)
# 3. [2pt] Create a variable called book_reviews, assigning it a vector that is the names from your books vector,
# but with the phrase "is a great read!" added to the end of each element. Use the paste() function. Print the book_reviews variable after you create it.
book_reviews <- c(paste(books, "is a great read!"))
print(book_reviews)
remove_book <- function(titles, index) {
return(titles[-index])
}
# 5. [2pt] Create a variable called books_without_five that is your books vector with the 5th book removed.
# Use your remove_book() function, passing in your books vector and an appropriate index as arguments.
# Print the books_without_five variable after you create it.
books_without_five <- remove_book(books, 5)
print(books_without_five)
# 6. [7pt] Create a variable called long_titles that contains only the elements in your books vector whose title is longer than 15 characters.
# Use a filter (e.g., a logical vector inside of square brackets) to select these elements from your books variable.
# Print the long_titles variable after you create it.
long_titles <- books[nchar(books[1:6]) > 15]
print(long_titles)
# 1. [3pt] Create a variable called numbers whose value is a vector of the numbers 1 to 201.
# Use the seq() function (or the : operator) to create this valueâ€”don't type out 200 numbers by hand!
numbers <- seq(1, 201)
print(numbers)
# 2. [2pt] Create a variable squared_numbers that is your numbers vector with all of the values squared (multiplied by themselves).
squared_numbers <- numbers * numbers
# 3. [2pt] Create a variable squared_mean that contains the mean (average) value of the squared_numbers vector.
# Use the mean() function to calculate this value. Print the squared_mean variable after you create it;
# it should have a value of 13567.67 (FYI, this is not what is meant by the "mean squared" in statistics!)
squaed_mean <- mean(squared_numbers)
print(squaed_mean)
# 4. [2pt] Create a variable squared_median that contains the median (middle) value of the squared_numbers vector.
# You'll need to look up a function that finds the median of a vector and use that to calculate the value.
# (Check: the value should again be 201) Print the squared median variable after you create it; it should also have a value of 10201
squared_median <- median(squared_numbers)
print(squared_median)
# 5. [9pt] Create a variable perfect_squares that is a vector of only the values in numbers which are perfect squares
# (that is, they are the product of a number multiplied by itself). You will need to use a filter (a logical vector inside of square brackets)
# to select these elements from numbers. You can produce a logical vector of whether numbers are perfect squares by taking their square roots
# (using the sqrt() function), and then seeing if the result is a whole number; you check if a number x is a whole number by comparing x to round(x)
# (so seeing if rounding the number doesn't change it). Print the perfect_squares variable after you create it. It should contain 14 values (starting with 1 4 9 25...)
perfect_squares <- numbers[sqrt(numbers) == round(sqrt(numbers))]
print(perfect_squares)
# 1. [1pt] Create a variable called spring_break that represents the first day of Spring Break (March 21, 2020).
# This value should be a Date-type value; create one using the as.Date() (Links to an external site.) function.
# You will need to read through and search the documentation online for details on what arguments this function takes,
# and what format that argument should be in (looking up new functions is a normal part of programming!)
spring_break <- as.Date("21mar2020", "%d%b%Y")
print(spring_break)
# 2. Note that you can check the "type" of a variable by using the class() function. For example class(spring_break) should produce "Date".
class(spring_break)
# 3. [1pt] Create a variable today that represents the current date (whenever the program is run) as a Date-type value.
today <- Sys.Date()
class(today)
# 4. [1pt] Create a variable days_to_break that represents the amount of time from the current date until break;
# do this by subtracting the date variables you just made. Note that the result isn't actually a number but a difftime value;
# a difftime value will also appear blank in RStudio's Environment variables list. Print the days_to_break variable after you create it.
# Your printed output can include the "Time difference of..." descriptive text.
days_to_break <- spring_break - today
print(days_to_break)
change_year <- function(date, year) {
date_as_string <- as.character(date)
month_and_day <- substr(date_as_string, 5, nchar(date_as_string))
year_month_date = paste(year, month_and_day)
new_date <- as.Date(year_month_date, "y-m-d")
}
# 6. [1pt] Test your change_year() function by calling it and passing in your spring_break variable and the year 2025 as an argument.
# Assign the result of the function to a new variable spring_break_2025, and print out that variable to visually confirm it has a value of "2025-03-21".
# You can also use the class() function to confirm that spring_break_2025 has a type of "Date".
spring_break_2025 <- change_year(spring_break, 2025)
print(spring_break_2025)
# 6. [1pt] Test your change_year() function by calling it and passing in your spring_break variable and the year 2025 as an argument.
# Assign the result of the function to a new variable spring_break_2025, and print out that variable to visually confirm it has a value of "2025-03-21".
# You can also use the class() function to confirm that spring_break_2025 has a type of "Date".
spring_break_2025 <- change_year(spring_break, 2025)
print(spring_break_2025)
print(date_as_string)
change_year <- function(date, year) {
date_as_string <- as.character(date)
print(date_as_string)
month_and_day <- substr(date_as_string, 5, nchar(date_as_string))
year_month_date = paste(year, month_and_day)
new_date <- as.Date(year_month_date, "y-m-d")
}
spring_break_2025 <- change_year(spring_break, 2025)
print(spring_break_2025)
spring_break_2025 <- change_year(spring_break, 2025)
print(spring_break_2025)
change_year <- function(date, year) {
date_as_string <- as.character(date)
print(date_as_string)
month_and_day <- substr(date_as_string, 5, nchar(date_as_string))
print(month_and_day)
year_month_date = paste(year, month_and_day)
new_date <- as.Date(year_month_date, "y-m-d")
return(new_date)
}
# 6. [1pt] Test your change_year() function by calling it and passing in your spring_break variable and the year 2025 as an argument.
# Assign the result of the function to a new variable spring_break_2025, and print out that variable to visually confirm it has a value of "2025-03-21".
# You can also use the class() function to confirm that spring_break_2025 has a type of "Date".
spring_break_2025 <- change_year(spring_break, 2025)
print(spring_break_2025)
change_year <- function(date, year) {
date_as_string <- as.character(date)
month_and_day <- substr(date_as_string, 5, nchar(date_as_string))
year_month_date = paste(year, month_and_day)
new_date <- as.Date(year_month_date, "%y-%m-%d")
return(new_date)
}
# 6. [1pt] Test your change_year() function by calling it and passing in your spring_break variable and the year 2025 as an argument.
# Assign the result of the function to a new variable spring_break_2025, and print out that variable to visually confirm it has a value of "2025-03-21".
# You can also use the class() function to confirm that spring_break_2025 has a type of "Date".
spring_break_2025 <- change_year(spring_break, 2025)
print(spring_break_2025)
change_year <- function(date, year) {
date_as_string <- as.character(date)
month_and_day <- substr(date_as_string, 5, nchar(date_as_string))
year_month_date = paste(year, month_and_day)
new_date <- as.Date(year_month_date, "%Y-%m-%d")
return(new_date)
}
# 6. [1pt] Test your change_year() function by calling it and passing in your spring_break variable and the year 2025 as an argument.
# Assign the result of the function to a new variable spring_break_2025, and print out that variable to visually confirm it has a value of "2025-03-21".
# You can also use the class() function to confirm that spring_break_2025 has a type of "Date".
spring_break_2025 <- change_year(spring_break, 2025)
print(spring_break_2025)
change_year <- function(date, year) {
date_as_string <- as.character(date)
month_and_day <- substr(date_as_string, 5, nchar(date_as_string))
year_combine = paste(year, month_and_day, sep = "")
new_date <- as.Date(year_combine, "%Y-%m-%d")
return(new_date)
}
# 6. [1pt] Test your change_year() function by calling it and passing in your spring_break variable and the year 2025 as an argument.
# Assign the result of the function to a new variable spring_break_2025, and print out that variable to visually confirm it has a value of "2025-03-21".
# You can also use the class() function to confirm that spring_break_2025 has a type of "Date".
spring_break_2025 <- change_year(spring_break, 2025)
print(spring_break_2025)
class(spring_break_2025)
year(spring_break)
date_has_passed <- function(date) {
today <- Sys.Date()
return((date - today) > 0)
}
# 8. [2pt] Test your date_has_passed() function by calling it and passing the deadline of this assignment ("2020-01-23"; you will need to use as.Date() to create a Date-type value).
# Print out the result of whether the deadline has passed (hopefully it hasn't!)
pass_deadline <- date_has_passed(as.Date("2020-01-23", "%Y-%m-%d"))
print(pass_deadline)
date_has_passed <- function(date) {
today <- Sys.Date()
return((date - today) < 0)
}
# 8. [2pt] Test your date_has_passed() function by calling it and passing the deadline of this assignment ("2020-01-23"; you will need to use as.Date() to create a Date-type value).
# Print out the result of whether the deadline has passed (hopefully it hasn't!)
pass_deadline <- date_has_passed(as.Date("2020-01-23", "%Y-%m-%d"))
print(pass_deadline)
date_has_passed <- function(date) {
today <- Sys.Date()
return((today - date) > 0)
}
# 8. [2pt] Test your date_has_passed() function by calling it and passing the deadline of this assignment ("2020-01-23"; you will need to use as.Date() to create a Date-type value).
# Print out the result of whether the deadline has passed (hopefully it hasn't!)
pass_deadline <- date_has_passed(as.Date("2020-01-23", "%Y-%m-%d"))
print(pass_deadline)
# 9. [3pt] Create a variable birthdays that contains a list of the birth dates (including year) of each person in your immediate familyâ€”you,
# your parents, and any siblings. Each value in the list should be a Date value (created with the as.Date() function)â€”not a string.
# Each value in the list must be tagged (named) with the person's name.
# Note you may have to ask if you don't know your family's birthdates (or make something up!).
# Print out the birthdays variable after you create it.
birthday <- list("Yueqi" = as.Date("1999-07-26", "%Y-%m-%d"), "Weiyi" = as.Date("1972-07-21", "%Y-%m-%d"), "Jackson" = "2000-11-28", "%Y-%m-%d")
print(birthday)
birthday <- list("Yueqi" = as.Date("1999-07-26", "%Y-%m-%d"), "Weiyi" = as.Date("1972-07-21", "%Y-%m-%d"), "Jackson" = as.Date("2000-11-28", "%Y-%m-%d"))
print(birthday)
get_next_birthday <- function(birthdate) {
year_changed <- change_year(birthdate, 2020)
if (date_has_passed(year_changed)) {
return(change_year(birthdate, 2021))
} else {
return(year_changed)
}
}
# 11. [3pt] Test your get_next_birthday() function by calling it and passing it the value from the birthdays variable representing your birthday.
# You will need to access this value from the birthdays list, using either bracket notation or dollar-sign notation.
get_next_birthday(birthday$Yueqi)
# 12. [3pt] Create a variable called next_birthdays that contains a list of the next birthdays (in either 2020 or 2021)
# for each of the family members in the original birthdays list. Use the lapply() function,
# passing it your birthdays variable and the name of your get_next_birthday function.
# Print out the next_birthdays variable after you create it.
next_birthdays <- lapply(get_next_birthday, birthday)
# 12. [3pt] Create a variable called next_birthdays that contains a list of the next birthdays (in either 2020 or 2021)
# for each of the family members in the original birthdays list. Use the lapply() function,
# passing it your birthdays variable and the name of your get_next_birthday function.
# Print out the next_birthdays variable after you create it.
next_birthdays <- lapply(birthday, get_next_birthday)
print(next_birthdays)
date_has_passed <- function(date, ignore_year = FALSE) {
if (ignore_year) {
new_date <- change_year(date, ignore_year)
return((today - new_date) > 0)
} else {
today <- Sys.Date()
return((today - date) > 0)
}
}
# 8. [2pt] Test your date_has_passed() function by calling it and passing the deadline of this assignment ("2020-01-23"; you will need to use as.Date() to create a Date-type value).
# Print out the result of whether the deadline has passed (hopefully it hasn't!)
pass_deadline <- date_has_passed(as.Date("2020-01-23", "%Y-%m-%d"))
print(pass_deadline)
get_next_birthday <- function(birthdate) {
year_changed <- change_year(birthdate, 2020)
if (date_has_passed(year_changed)) {
return(change_year(birthdate, 2021))
} else {
return(year_changed)
}
}
# 11. [3pt] Test your get_next_birthday() function by calling it and passing it the value from the birthdays variable representing your birthday.
# You will need to access this value from the birthdays list, using either bracket notation or dollar-sign notation.
get_next_birthday(birthday$Yueqi)
next_birthdays <- lapply(birthday, get_next_birthday)
print(next_birthdays)
source('~/Desktop/INFO 201/a2-core-skills-xyq678-1736869/assignment.R')
date_has_passed <- function(date, ignore_year = FALSE) {
today <- Sys.Date()
this_year <- substr(as.character(today), 1, 4)
if (ignore_year) {
new_date <- change_year(date, this_year)
return((today - new_date) > 0)
} else {
return((today - date) > 0)
}
}
# 8. [2pt] Test your date_has_passed() function by calling it and passing the deadline of this assignment ("2020-01-23"; you will need to use as.Date() to create a Date-type value).
# Print out the result of whether the deadline has passed (hopefully it hasn't!)
pass_deadline <- date_has_passed(as.Date("2020-01-23", "%Y-%m-%d"))
print(pass_deadline)
get_next_birthday <- function(birthdate) {
year_changed <- change_year(birthdate, 2020)
if (date_has_passed(year_changed)) {
return(change_year(birthdate, 2021))
} else {
return(year_changed)
}
}
# 11. [3pt] Test your get_next_birthday() function by calling it and passing it the value from the birthdays variable representing your birthday.
# You will need to access this value from the birthdays list, using either bracket notation or dollar-sign notation.
get_next_birthday(birthday$Yueqi)
# 12. [3pt] Create a variable called next_birthdays that contains a list of the next birthdays (in either 2020 or 2021)
# for each of the family members in the original birthdays list. Use the lapply() function,
# passing it your birthdays variable and the name of your get_next_birthday function.
# Print out the next_birthdays variable after you create it.
next_birthdays <- lapply(birthday, get_next_birthday)
print(next_birthdays)
# Create a vector of 100 employees ("Employee 1", "Employee 2", ... "Employee 100")
# Hint: use the `paste()` function and vector recycling to add a number to the word
# "Employee"
employees <- paste("Employee", 1:100)
# Create a vector of 100 employees ("Employee 1", "Employee 2", ... "Employee 100")
# Hint: use the `paste()` function and vector recycling to add a number to the word
# "Employee"
employees <- paste("Employee", 1:100)
# Create a vector of 100 random salaries for the year 2017
# Use the `runif()` function to pick random numbers between 40000 and 50000
salaries_2017 <- 40000 + 10000 * runif(100)
# Create a vector of 100 random salaries for the year 2017
# Use the `runif()` function to pick random numbers between 40000 and 50000
salaries_2017 <- runif(100, 40000, 50000)
# Create a vector of 100 annual salary adjustments between -5000 and 10000.
# (A negative number represents a salary decrease due to corporate greed)
# Again use the `runif()` function to pick 100 random numbers in that range.
annual_salary_adjustment <- runif(100, -5000, 10000)
# Create a data frame `salaries` by combining the 3 vectors you just made
# Remember to set `stringsAsFactors=FALSE`!
salaries <- data.frame(employees, salaries_2017, annual_salary_adjustment)
# Create a data frame `salaries` by combining the 3 vectors you just made
# Remember to set `stringsAsFactors=FALSE`!
salaries <- data.frame(employees, salaries_2017, annual_salary_adjustment, stringsAsFactors = FALSE)
print(salaries)
# Add a column to the `salaries` data frame that represents each person's
# salary in 2018 (e.g., with the salary adjustment added in).
salaries$salaries_2018 <- salaries_2017 + annual_salary_adjustment
View(salaries)
# Add a column to the `salaries` data frame that has a value of `TRUE` if the
# person got a raise (their salary went up)
salaries$raise <- salaries_2018 > salaries_2017
# Add a column to the `salaries` data frame that has a value of `TRUE` if the
# person got a raise (their salary went up)
salaries$raise <- salaries$salaries_2018 > salaries_2017
View(salaries)
# What was the 2018 salary of Employee 57
salaries[57, "salaries_2018"]
# How many employees got a raise?
nrow(salaries[, "annual_salary_adjustment" > 0])
# How many employees got a raise?
salaries[, "annual_salary_adjustment" > 0]
# How many employees got a raise?
salaries[, "raise" == TRUE]
# How many employees got a raise?
salaries["raise" == TRUE, ]
View(salaries)
# How many employees got a raise?
salaries[salaries$raise == TRUE, ]
# How many employees got a raise?
nrow(salaries[salaries$raise == TRUE, ])
# What was the dollar value of the highest raise?
max(salaries$annual_salary_adjustment)
# What was the dollar value of the highest raise?
highest_raise <- max(salaries$annual_salary_adjustment)
# What was the "name" of the employee who received the highest raise?
salaries[salaries$annual_salary_adjustment == highest_raise, "employees"]
# What was the largest decrease in salaries between the two years?
largest_decrease <- min(salaries$annual_salary_adjustment)
# What was the name of the employee who recieved largest decrease in salary?
salaries[salaries$annual_salary_adjustment == largest_decrease, "employees"]
# What was the average salary change?
mean(salaries$annual_salary_adjustment)
# For people who did not get a raise, how much money did they lose on average?
mean(salaries[salaries$annual_salary_adjustment < 0, "annual_salary_adjustment"])
# Write a .csv file of your salary data to your working directory
write.csv(salaries, ".")
# Write a .csv file of your salary data to your working directory
write.csv(salaries)
# Use the `read.csv()` functoin to read the data from the `data/gates_money.csv`
# file into a variable called `grants` using the `read.csv()`
# Be sure to set your working directory in RStudio, and do NOT treat strings as
# factors!
grants <- read.csv(data/gates_money.csv)
# Use the `read.csv()` functoin to read the data from the `data/gates_money.csv`
# file into a variable called `grants` using the `read.csv()`
# Be sure to set your working directory in RStudio, and do NOT treat strings as
# factors!
grants <- read.csv(`data/gates_money.csv`)
# Use the `read.csv()` functoin to read the data from the `data/gates_money.csv`
# file into a variable called `grants` using the `read.csv()`
# Be sure to set your working directory in RStudio, and do NOT treat strings as
# factors!
grants <- read.csv("data/gates_money.csv")
# Use the `read.csv()` functoin to read the data from the `data/gates_money.csv`
# file into a variable called `grants` using the `read.csv()`
# Be sure to set your working directory in RStudio, and do NOT treat strings as
# factors!
grants <- read.csv("data/gates_money.csv")
# Use the `read.csv()` functoin to read the data from the `data/gates_money.csv`
# file into a variable called `grants` using the `read.csv()`
# Be sure to set your working directory in RStudio, and do NOT treat strings as
# factors!
grants <- read.csv("data/gates_money.csv")
# Use the `read.csv()` functoin to read the data from the `data/gates_money.csv`
# file into a variable called `grants` using the `read.csv()`
# Be sure to set your working directory in RStudio, and do NOT treat strings as
# factors!
grants <- read.csv("data/gates_money.csv")
# Use the `read.csv()` functoin to read the data from the `data/gates_money.csv`
# file into a variable called `grants` using the `read.csv()`
# Be sure to set your working directory in RStudio, and do NOT treat strings as
# factors!
grants <- read.csv(`data/gates_money.csv`)
# Use the `read.csv()` functoin to read the data from the `data/gates_money.csv`
# file into a variable called `grants` using the `read.csv()`
# Be sure to set your working directory in RStudio, and do NOT treat strings as
# factors!
grants <- read.csv(gates_money.csv, "data/gates_money.csv")
getwd()
setwd("~/Desktop/INFO 201/book-exercises/chapter-10-exercises/exercise-4")
# Use the `read.csv()` functoin to read the data from the `data/gates_money.csv`
# file into a variable called `grants` using the `read.csv()`
# Be sure to set your working directory in RStudio, and do NOT treat strings as
# factors!
grants <- read.csv("data/gates_money.csv")
# Use the View function to look at the loaded data
View(grants)
# Create a variable `organization` that contains the `organization` column of
# the dataset
organization <- grants$organization
# Confirm that the "organization" column is a vector using the `is.vector()`
# function.
# This is a useful debugging tip if you hit errors later!
is.vector(organization)
# Create a variable `organization` that contains the `organization` column of
# the dataset
organization <- grants[, "organization"]
# Confirm that the "organization" column is a vector using the `is.vector()`
# function.
# This is a useful debugging tip if you hit errors later!
is.vector(organization)
print(organization)
# Create a variable `organization` that contains the `organization` column of
# the dataset
organization <- as.vector(grants$organization)
# Confirm that the "organization" column is a vector using the `is.vector()`
# function.
# This is a useful debugging tip if you hit errors later!
is.vector(organization)
# What was the mean grant value?
mean(grants$total_amount)
# What was the dollar amount of the largest grant?
max(grants$total_amount)
# What was the dollar amount of the smallest grant?
min(grants$total_amount)
# Which organization received the largest grant?
grants[grants$total_amount == max(grants$total_amount), "organization"]
# Which organization received the largest grant?
grants[grants$total_amount == max(grants$total_amount), grants$organization]
# Which organization received the largest grant?
grants[grants$total_amount == max(grants$total_amount), organization]
# Which organization received the largest grant?
grants[grants$total_amount == max(grants$total_amount), "organization"]
# What was the dollar amount of the largest grant?
largest_grant <- max(grants$total_amount)
# Which organization received the largest grant?
grants[grants$total_amount == largest_grant, "organization"]
# Which organization received the smallest grant?
grants[grants$total_amount == smallest_grant, "organization"]
# What was the dollar amount of the smallest grant?
smallest_grant <- min(grants$total_amount)
# Which organization received the smallest grant?
grants[grants$total_amount == smallest_grant, "organization"]
# How many grants were awarded in 2010?
nrow(grants[grants$start_year == 2010, ])
