get_trending_table <- function() {
query_params <- list(q = "api_key", sort = key_param$value)
response <- GET(paste0(base_url, "/trending/person/week?api_key=", key_param$value))
body <- content(response, "text")
repos <- fromJSON(body)
trending_df <- repos$results
return(trending_df)
}
library("dplyr")
trending_df <- filter(trending_df, known_for_department == "Acting")
View(trending_df)
View(trending_df)
trending_df <- filter(trending_df, known_for_department == "Acting") %>% mutate(photo = paste0("https://image.tmdb.org/t/p/h100", profile_path))
View(trending_df)
View(trending_df)
trending_df <- filter(trending_df, known_for_department == "Acting") %>%
mutate(photo = paste0("![", name, "](", "https://image.tmdb.org/t/p/h100", profile_path, ")"))
View(trending_df)
View(trending_df)
trending_df <- filter(trending_df, known_for_department == "Acting") %>%
mutate(photo = paste0("![", name, "](", "https://image.tmdb.org/t/p/h100", profile_path, ")")) %>%
select(name, photo)
View(trending_df)
View(trending_df)
trending_df <- filter(trending_df, known_for_department == "Acting") %>%
mutate(photo = paste0("![", name, "](", "https://image.tmdb.org/t/p/h100", profile_path, ")")) %>%
select(name, photo) %>%
top_n(5)
trending_df <- filter(trending_df, known_for_department == "Acting") %>%
mutate(photo = paste0("![", name, "](", "https://image.tmdb.org/t/p/h100", profile_path, ")")) %>%
select(name, photo)
trending_df <- repos$results
trending_df <- repos$results %>% filter(known_for_department == "Acting") %>%
mutate(photo = paste0("![", name, "](", "https://image.tmdb.org/t/p/h100", profile_path, ")")) %>%
select(name, photo)
trending_df <- repos$results %>% filter(known_for_department == "Acting") %>%
mutate(photo = paste0("![", name, "](", "https://image.tmdb.org/t/p/h100", profile_path, ")")) %>%
select(name, photo) %>%
top_n(5)
View(trending_df)
View(trending_df)
get_trending_table()
get_trending_table <- function() {
query_params <- list(q = "api_key", sort = key_param$value)
response <- GET(paste0(base_url, "/trending/person/week?api_key=", key_param$value))
body <- content(response, "text")
repos <- fromJSON(body)
trending_df <- repos$results %>% filter(known_for_department == "Acting") %>%
mutate(photo = paste0("![", name, "](", "https://image.tmdb.org/t/p/h100", profile_path, ")")) %>%
select(name, photo) %>%
top_n(5)
return(trending_df)
}
get_trending_table()
params_list <- list(query = name, api_key = key_param$value)
get_actor_data <- function(name) {
params_list <- list(query = name, api_key = key_param$value)
}
response <- GET(paste0(base_url, "/search/person"), params_list)
params_list <- list(query = name, api_key = key_param$value)
name <- Tom Hanks
name <- "Tom Hanks"
params_list <- list(query = name, api_key = key_param$value)
response <- GET(paste0(base_url, "/search/person"), params_list)
View(response)
View(response)
GET(paste0(base_url, "/search/person"), params_list)
GET(paste0(base_url, "/search/person"), query = params_list)
response <- GET(paste0(base_url, "/search/person"), query = params_list)
View(response)
View(response)
body <- content(response, "text")
repos <- fromJSON(body)
View(repos)
View(repos)
View(repos)
View(repos)
information <- repos$results
View(information)
View(information)
information <- repos$results %>% top_n(1)
information <- repos$results %>%
top_n(1) %>%
}
information <- repos$results %>%
top_n(1) %>%
select(id, known_for)
View(information)
View(information)
information <- repos$results %>%
top_n(1) %>%
select(id, known_for) %>% pull(known_for)
View(information)
View(information)
information <- repos$results %>%
top_n(1) %>%
mutate(titles = known_for[[title]])
information <- repos$results %>%
top_n(1) %>%
mutate(titles = known_for[["title"]])
View(information)
View(information)
#select(id, known_for) %>% pull(known_for)
repos$results$known_for[["title"]]
#select(id, known_for) %>% pull(known_for)
repos$results$known_for$title
#select(id, known_for) %>% pull(known_for)
repos$results$known_for
#select(id, known_for) %>% pull(known_for)
repos$results$known_for["title"]
#select(id, known_for) %>% pull(known_for)
repos$results$known_for
#select(id, known_for) %>% pull(known_for)
repos$results$known_for %>% pull(title)
#select(id, known_for) %>% pull(known_for)
list <- repos$results$known_for
View(list)
View(list)
#select(id, known_for) %>% pull(known_for)
repos$results$known_for[[1]]
#select(id, known_for) %>% pull(known_for)
repos$results$known_for[[1]][["title"]]
information <- repos$results %>%
top_n(1) %>%
mutate(titles = known_for[[1]][["title"]])
information <- repos$results %>%
top_n(1) %>%
mutate(titles = c(known_for[[1]][["title"]]))
titles <- known_for[[1]][["title"]]
titles <- information$known_for[[1]][["title"]]
is.vector(titles)
information <- mutate(titles = titles)
information <- information %>% mutate(titles = titles)
result <- list(id = information$id, titles = titles)
View(result)
GET(paste0(base_url, "/person/", information$id))
response2 <- GET(paste0(base_url, "/person/", information$id, "?api_key=", key_param$value))
GET(paste0(base_url, "/person/", information$id, "?api_key=", key_param$value))
body2 <- content(response2, "text")
repos2 <- fromJSON(body2)
View(repos2)
View(repos2)
result <- list(name = information$name, id = information$id, imdb_id = repos2$imdb_id, biography = repos2$biography, titles = titles)
View(result)
View(result)
get_actor_data <- function(name) {
params_list <- list(query = name, api_key = key_param$value)
response <- GET(paste0(base_url, "/search/person"), query = params_list)
body <- content(response, "text")
repos <- fromJSON(body)
information <- repos$results %>% top_n(1)
titles <- information$known_for[[1]][["title"]]
response2 <- GET(paste0(base_url, "/person/", information$id, "?api_key=", key_param$value))
body2 <- content(response2, "text")
repos2 <- fromJSON(body2)
result <- list(name = information$name, id = information$id, imdb_id = repos2$imdb_id, biography = repos2$biography, titles = titles)
return(result)
}
get_actor_data("Tom Cruise")
name = "Tom Cruise"
params_list <- list(query = name, api_key = key_param$value)
response <- GET(paste0(base_url, "/search/person"), query = params_list)
body <- content(response, "text")
repos <- fromJSON(body)
information <- repos$results %>% top_n(1)
titles <- information$known_for[[1]][["title"]]
response2 <- GET(paste0(base_url, "/person/", information$id, "?api_key=", key_param$value))
information <- repos$results %>% top_n(1)
information <- repos$results[1, ]
titles <- information$known_for[[1]][["title"]]
response2 <- GET(paste0(base_url, "/person/", information$id, "?api_key=", key_param$value))
get_actor_data <- function(name) {
params_list <- list(query = name, api_key = key_param$value)
response <- GET(paste0(base_url, "/search/person"), query = params_list)
body <- content(response, "text")
repos <- fromJSON(body)
information <- repos$results[1, ]
titles <- information$known_for[[1]][["title"]]
response2 <- GET(paste0(base_url, "/person/", information$id, "?api_key=", key_param$value))
body2 <- content(response2, "text")
repos2 <- fromJSON(body2)
result <- list(name = information$name, id = information$id, imdb_id = repos2$imdb_id, biography = repos2$biography, titles = titles)
return(result)
}
get_actor_data("Tom Cruise")
id <- 500
GET(paste0(base_url, "/person/", id, "/movie_credits$apo_key=", key_param$value))
id <- 500
response <- GET(paste0(base_url, "/person/", id, "/movie_credits$apo_key=", key_param$value))
GET(paste0(base_url, "/person/", id, "/movie_credits$api_key=", key_param$value))
id <- "500"
GET(paste0(base_url, "/person/", id, "/movie_credits$api_key=", key_param$value))
GET(paste0(base_url, "/person/", id, "/movie_credits?api_key=", key_param$value))
response <- GET(paste0(base_url, "/person/", id, "/movie_credits?api_key=", key_param$value))
body <- content(response, "text")
repos <- fromJSON(body)
cast_df <- repos$cast
View(cast_df)
crew_df <- repos$crew
View(crew_df)
response <- GET(paste0(base_url, "/person/", id, "/tv_credits?api_key=", key_param$value))
body <- content(response, "text")
repos <- fromJSON(body)
cast_df <- repos$cast
crew_df <- repos$crew
View(cast_df)
View(crew_df)
response <- GET(paste0(base_url, "/person/", id, "/combined_credits?api_key=", key_param$value))
body <- content(response, "text")
repos <- fromJSON(body)
cast_df <- repos$cast
crew_df <- repos$crew
View(cast_df)
View(crew_df)
response <- GET(paste0(base_url, "/person/", id, "/movie_credits?api_key=", key_param$value))
body <- content(response, "text")
repos <- fromJSON(body)
cast_df <- repos$cast
crew_df <- repos$crew
View(cast_df)
View(crew_df)
movie_cast_df <- repos$cast
View(movie_cast_df)
GET(paste0(base_url, "/person/", id, "/tv_credits?api_key=", key_param$value))
body2 <- content(response2, "text")
repos2 <- fromJSON(body2)
repos2 <- fromJSON(body2)
response2 <- GET(paste0(base_url, "/person/", id, "/tv_credits?api_key=", key_param$value))
body2 <- content(response2, "text")
repos2 <- fromJSON(body2)
tv_cast_df <- repos2$cast
View(tv_cast_df)
movie_cast_df <- movie_cast_df %>% filter(release_date != NULL)
movie_cast_df <- movie_cast_df %>% filter(release_date != NA)
View(movie_cast_df)
movie_cast_df <- repos$cast
View(movie_cast_df)
movie_cast_df <- movie_cast_df %>% filter(release_date <= Sys.Date())
View(movie_cast_df)
movie_cast_df <- movie_cast_df %>%
filter(release_date <= Sys.Date()) %>%
mutate(year = substr(release_date, 1, 4))
View(movie_cast_df)
movie_cast_df <- movie_cast_df %>%
filter(release_date <= Sys.Date()) %>%
mutate(year = substr(release_date, 1, 4)) %>%
group_by(year) %>%
summarize(avg_popularity = mean(popularity))
View(movie_cast_df)
movie_cast_df <- repos$cast %>%
filter(release_date <= Sys.Date()) %>%
mutate(year = substr(release_date, 1, 4)) %>%
group_by(year) %>%
summarize(avg_popularity = mean(popularity))
View(movie_cast_df)
tv_cast_df <- repos2$cast %>%
filter(first_air_date <= Sys.Date())
View(tv_cast_df)
tv_cast_df <- repos2$cast %>%
filter(first_air_date <= Sys.Date()) %>%
mutate(year = substr(first_air_date, 1, 4))
View(tv_cast_df)
movie_cast_df <- repos$cast %>%
filter(release_date <= Sys.Date()) %>%
mutate(year = substr(release_date, 1, 4)) %>%
group_by(year) %>%
summarize(movie_avg_popularity = mean(popularity))
tv_cast_df <- repos2$cast %>%
filter(first_air_date <= Sys.Date()) %>%
mutate(year = substr(first_air_date, 1, 4)) %>%
group_by(year) %>%
summarize(tv_avg_popularity = mean(popularity))
View(tv_cast_df)
View(movie_cast_df)
summary <- left_join(movie_cast_df, tv_cast_df, by = "year")
View(summary)
analyze_actor <- function(id) {
response <- GET(paste0(base_url, "/person/", id, "/movie_credits?api_key=", key_param$value))
body <- content(response, "text")
repos <- fromJSON(body)
movie_cast_df <- repos$cast %>%
filter(release_date <= Sys.Date()) %>%
mutate(year = substr(release_date, 1, 4)) %>%
group_by(year) %>%
summarize(movie_avg_popularity = mean(popularity))
response2 <- GET(paste0(base_url, "/person/", id, "/tv_credits?api_key=", key_param$value))
body2 <- content(response2, "text")
repos2 <- fromJSON(body2)
tv_cast_df <- repos2$cast %>%
filter(first_air_date <= Sys.Date()) %>%
mutate(year = substr(first_air_date, 1, 4)) %>%
group_by(year) %>%
summarize(tv_avg_popularity = mean(popularity))
summary <- left_join(movie_cast_df, tv_cast_df, by = "year")
return(summary)
}
result <- list(avg_movie_pop = mean(repos$cast$popularity))
View(result)
result <- list(avg_movie_pop = mean(repos$cast$popularity),
avg_tv_pop = mean(repos2$cast$popularity))
View(result)
result <- list(avg_movie_pop = mean(repos$cast$popularity),
avg_tv_pop = mean(repos2$cast$popularity))
View(result)
View(result)
result <- list(id = id,
avg_movie_pop = mean(repos$cast$popularity),
avg_tv_pop = mean(repos2$cast$popularity),
total_years = nrow(summary))
result <- list(id = id,
avg_movie_pop = mean(repos$cast$popularity),
avg_tv_pop = mean(repos2$cast$popularity),
total_years = nrow(summary),
highest_movie_pop = max(summary$movie_avg_popularity))
result <- list(id = id,
avg_movie_pop = mean(repos$cast$popularity),
avg_tv_pop = mean(repos2$cast$popularity),
total_years = nrow(summary),
highest_movie_pop = max(summary$movie_avg_popularity),
highest_tv_pop = max(summary$tv_avg_popularity))
result <- list(id = id,
avg_movie_pop = mean(repos$cast$popularity),
avg_tv_pop = mean(repos2$cast$popularity),
total_years = nrow(summary),
highest_movie_pop = max(summary$movie_avg_popularity, na.rm = TRUE),
highest_tv_pop = max(summary$tv_avg_popularity, na.rm = TRUE))
result <- list(id = id,
avg_movie_pop = mean(repos$cast$popularity),
avg_tv_pop = mean(repos2$cast$popularity),
total_years = nrow(summary),
highest_movie_pop = max(summary$movie_avg_popularity, na.rm = TRUE),
highest_tv_pop = max(summary$tv_avg_popularity, na.rm = TRUE),
highest_movie_pop_year = filter(summary, avg_movie_pop == max(avg_movie_pop)) %>% pull(year))
result <- list(id = id,
avg_movie_pop = mean(repos$cast$popularity),
avg_tv_pop = mean(repos2$cast$popularity),
total_years = nrow(summary),
highest_movie_pop = max(summary$movie_avg_popularity, na.rm = TRUE),
highest_tv_pop = max(summary$tv_avg_popularity, na.rm = TRUE),
highest_movie_pop_year = summary %>% filter(avg_movie_pop == max(avg_movie_pop)) %>% pull(year))
result <- list(id = id,
avg_movie_pop = mean(repos$cast$popularity),
avg_tv_pop = mean(repos2$cast$popularity),
total_years = nrow(summary),
highest_movie_pop = max(summary$movie_avg_popularity, na.rm = TRUE),
highest_tv_pop = max(summary$tv_avg_popularity, na.rm = TRUE),
highest_movie_pop_year = summary %>% filter(avg_movie_pop == highest_movie_pop) %>% pull(year))
result <- list(id = id,
avg_movie_pop = mean(repos$cast$popularity),
avg_tv_pop = mean(repos2$cast$popularity),
total_years = nrow(summary),
highest_movie_pop = max(summary$movie_avg_popularity, na.rm = TRUE),
highest_tv_pop = max(summary$tv_avg_popularity, na.rm = TRUE),
highest_movie_pop_year = summary %>% filter(avg_movie_pop == highest_movie_pop) %>% pull(year))
result <- list(id = id,
avg_movie_pop = mean(repos$cast$popularity),
avg_tv_pop = mean(repos2$cast$popularity),
total_years = nrow(summary),
highest_movie_pop = max(summary$movie_avg_popularity, na.rm = TRUE),
highest_tv_pop = max(summary$tv_avg_popularity, na.rm = TRUE),
highest_movie_pop_year = summary %>% filter(movie_avg_popularity == max(movie_avg_popularity)) %>% pull(year))
result <- list(id = id,
avg_movie_pop = mean(repos$cast$popularity),
avg_tv_pop = mean(repos2$cast$popularity),
total_years = nrow(summary),
highest_movie_pop = max(summary$movie_avg_popularity, na.rm = TRUE),
highest_tv_pop = max(summary$tv_avg_popularity, na.rm = TRUE),
highest_movie_pop_year = summary %>% filter(movie_avg_popularity == max(movie_avg_popularity)) %>% pull(year),
highest_tv_pop_year = summary %>% filter(tv_avg_popularity == max(tv_avg_popularity)) %>% pull(year))
highest_movie <- max(summary$movie_avg_popularity, na.rm = TRUE)
highest_tv <- max(summary$tv_avg_popularity, na.rm = TRUE)
result <- list(id = id,
avg_movie_pop = mean(repos$cast$popularity),
avg_tv_pop = mean(repos2$cast$popularity),
total_years = nrow(summary),
highest_movie_pop = highest_movie,
highest_tv_pop = highest_tv,
highest_movie_pop_year = summary %>% filter(movie_avg_popularity == highest_movie) %>% pull(year),
highest_tv_pop_year = summary %>% filter(tv_avg_popularity == highest_tv) %>% pull(year))
View(result)
analyze_actor <- function(id) {
response <- GET(paste0(base_url, "/person/", id, "/movie_credits?api_key=", key_param$value))
body <- content(response, "text")
repos <- fromJSON(body)
movie_cast_df <- repos$cast %>%
filter(release_date <= Sys.Date()) %>%
mutate(year = substr(release_date, 1, 4)) %>%
group_by(year) %>%
summarize(movie_avg_popularity = mean(popularity))
response2 <- GET(paste0(base_url, "/person/", id, "/tv_credits?api_key=", key_param$value))
body2 <- content(response2, "text")
repos2 <- fromJSON(body2)
tv_cast_df <- repos2$cast %>%
filter(first_air_date <= Sys.Date()) %>%
mutate(year = substr(first_air_date, 1, 4)) %>%
group_by(year) %>%
summarize(tv_avg_popularity = mean(popularity))
summary <- left_join(movie_cast_df, tv_cast_df, by = "year")
highest_movie <- max(summary$movie_avg_popularity, na.rm = TRUE)
highest_tv <- max(summary$tv_avg_popularity, na.rm = TRUE)
result <- list(id = id,
avg_movie_pop = mean(repos$cast$popularity),
avg_tv_pop = mean(repos2$cast$popularity),
total_years = nrow(summary),
highest_movie_pop = highest_movie,
highest_tv_pop = highest_tv,
highest_movie_pop_year = summary %>% filter(movie_avg_popularity == highest_movie) %>% pull(year),
highest_tv_pop_year = summary %>% filter(tv_avg_popularity == highest_tv) %>% pull(year))
return(result)
}
analyze_actor("500")
nyt_key <- "TieWrcIAGGvYhYaPtXDuBEf5xkppzHTj"
setwd("~/Desktop/INFO 201/book-exercises/chapter-18-exercises/exercise-1")
# Use `source()` to load your API key variable from the `apikey.R` file you made.
# Make sure you've set your working directory!
key_param <- source("apikey.R")
uri <- paste0(base_url, endpoint)
endpoint <- "reviews/search.json"
uri <- paste0(base_url, endpoint)
movie_name <- "Titanic"
query_params <- list("api-key" = nyt_key, "movie_name" = movie_name)
# Send the HTTP Request to download the data
# Extract the content and convert it from JSON
response <- GET(uri, query = query_params)
GET(uri, query = query_params)
library("knitr")
library("knitr")
body <- content(response, "text")
data <- fromJSON(body)
View(data)
# Manually inspect the returned data and identify the content of interest
# (which are the movie reviews).
# Use functions such as `names()`, `str()`, etc.
names(data$results)
# Send the HTTP Request to download the data
# Extract the content and convert it from JSON
response <- GET(uri, query = query_params)
body <- content(response, "text")
data <- fromJSON(body)
setwd("~/Desktop/INFO 201/a5-data-report-xyq678-1736869")
source("analysis.R")
source("analysis.R")
actor_name <- "Leonardo DiCaprio"
Sys.date() - 7
Sys.Date() - 7
This section procides data about treding actors, from `r Sys.Date() - 7` to `r Sys.Date()`
r Sys.Date()
Sys.Date()
source('~/Desktop/INFO 201/a5-data-report-xyq678-1736869/analysis.R')
analyze_actor(50)
ktable(get_trending_table())
kable(get_trending_table())
get_actor_data(actor_name)
actor_info <- get_actor_data(actor_name)
imdb_page <- paste0("https://www.imdb.com/name/", actor_info$imdb_id)
movies <- actor_info$titles
actor_info$titles
movies <- paste("* ", movies)
paste("* ", movies)
movies <- actor_info$titles
paste("* ", movies)
movies <- actor_info$titles
movies <- paste("* ", movies)
.
movies <- actor_info$titles
movies <- paste("* ", movies, sep = "\n")
paste("* ", movies, sep = "\n")
biography <- actor_info$biography
actor_data <- analyze_actor(actor_name)
actor_data <- analyze_actor(actor_info$id)
avg_difference <- abs(actor_data$avg_movie_pop - actor_data$avg_tv_pop)
avg_diff <- abs(actor_data$avg_movie_pop - actor_data$avg_tv_pop)
top_diff <- abs(actor_data$highest_movie_pop - actor_data$highest_tv_pop)
repos$cast
kable(actor_data$tv_cast_df)
setwd("~/Desktop/INFO 201/book-exercises/chapter-18-exercises/exercise-1")
# Construct an HTTP request to search for reviews for the given movie.
# The base URI is `https://api.nytimes.com/svc/movies/v2/`
# The resource is `reviews/search.json`
# See the interactive console for parameter details:
#   https://developer.nytimes.com/movie_reviews_v2.json
#
# You should use YOUR api key (as the `api-key` parameter)
# and your `movie_name` variable as the search query!
base_url <- "https://api.nytimes.com/svc/movies/v2"
endpoint <- "reviews/search.json"
uri <- paste0(base_url, endpoint)
movie_name <- "Titanic"
query_params <- list("api-key" = nyt_key, "movie_name" = movie_name)
# Send the HTTP Request to download the data
# Extract the content and convert it from JSON
response <- GET(uri, query = query_params)
# Use `source()` to load your API key variable from the `apikey.R` file you made.
# Make sure you've set your working directory!
key_param <- source("apikey.R")
endpoint <- "reviews/search.json"
uri <- paste0(base_url, endpoint)
movie_name <- "Titanic"
query_params <- list("api-key" = nyt_key, "movie_name" = movie_name)
# Use `source()` to load your API key variable from the `apikey.R` file you made.
# Make sure you've set your working directory!
key_param <- source("apikey.R")
query_params <- list("api-key" = key_param, "movie_name" = movie_name)
# Send the HTTP Request to download the data
# Extract the content and convert it from JSON
response <- GET(uri, query = query_params)
query_params <- list("api-key" = key_param$value, "movie_name" = movie_name)
# Send the HTTP Request to download the data
# Extract the content and convert it from JSON
response <- GET(uri, query = query_params)
GET(uri, query = query_params)
body <- content(response, "text")
